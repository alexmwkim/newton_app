/**
 * ÎÖ∏Ìã∞ÌîºÏºÄÏù¥ÏÖò ÏãúÏä§ÌÖúÍ≥º ÏÜåÏÖú Ïï°ÏÖò Ïó∞Îèô ÌÖåÏä§Ìä∏ Ïú†Ìã∏Î¶¨Ìã∞
 */

import { useSocialStore } from '../store/SocialStore';
import { useNotifications } from '../hooks/useNotifications';
import { useAuth } from '../contexts/AuthContext';

/**
 * Ïä§ÌÉÄ Ïï°ÏÖò ÌÖåÏä§Ìä∏
 */
export const testStarNotificationIntegration = async (noteId, noteOwnerId) => {
  try {
    const { user } = useAuth();
    const { starNote } = useSocialStore();
    
    if (!user?.id) {
      throw new Error('User not authenticated');
    }
    
    if (user.id === noteOwnerId) {
      console.log('‚ö†Ô∏è Cannot star own note - no notification will be sent');
      return;
    }
    
    console.log('üß™ Testing star notification integration...');
    console.log('üìù Note ID:', noteId);
    console.log('üë§ Starring user:', user.id);
    console.log('üë§ Note owner:', noteOwnerId);
    
    // Ïä§ÌÉÄ Ïï°ÏÖò Ïã§Ìñâ (ÎÖ∏Ìã∞ÌîºÏºÄÏù¥ÏÖò ÏûêÎèô ÏÉùÏÑ± Ìè¨Ìï®)
    const result = await starNote(noteId, user.id);
    
    console.log('‚úÖ Star action completed:', result);
    console.log('üì± Notification should be created for user:', noteOwnerId);
    
    return result;
  } catch (error) {
    console.error('‚ùå Star notification test failed:', error);
    throw error;
  }
};

/**
 * ÌåîÎ°úÏö∞ Ïï°ÏÖò ÌÖåÏä§Ìä∏
 */
export const testFollowNotificationIntegration = async (userIdToFollow) => {
  try {
    const { user } = useAuth();
    const { followUser } = useSocialStore();
    
    if (!user?.id) {
      throw new Error('User not authenticated');
    }
    
    if (user.id === userIdToFollow) {
      console.log('‚ö†Ô∏è Cannot follow self - no notification will be sent');
      return;
    }
    
    console.log('üß™ Testing follow notification integration...');
    console.log('üë§ Following user:', user.id);
    console.log('üë§ User to follow:', userIdToFollow);
    
    // ÌåîÎ°úÏö∞ Ïï°ÏÖò Ïã§Ìñâ (ÎÖ∏Ìã∞ÌîºÏºÄÏù¥ÏÖò ÏûêÎèô ÏÉùÏÑ± Ìè¨Ìï®)
    const result = await followUser(user.id, userIdToFollow);
    
    console.log('‚úÖ Follow action completed:', result);
    console.log('üì± Notification should be created for user:', userIdToFollow);
    
    return result;
  } catch (error) {
    console.error('‚ùå Follow notification test failed:', error);
    throw error;
  }
};

/**
 * ÎÖ∏Ìã∞ÌîºÏºÄÏù¥ÏÖò ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏
 */
export const checkNotificationSystemStatus = () => {
  try {
    const { user } = useAuth();
    const { notifications, unreadCount, isLoading, hasUnread } = useNotifications();
    
    console.log('üìä Notification System Status:');
    console.log('üë§ Current user:', user?.id || 'Not authenticated');
    console.log('üì¨ Total notifications:', notifications.length);
    console.log('üî¥ Unread count:', unreadCount);
    console.log('üì± Has unread:', hasUnread);
    console.log('‚è≥ Loading:', isLoading);
    console.log('üìù Recent notifications:', notifications.slice(0, 3).map(n => ({
      id: n.id,
      type: n.type,
      title: n.title,
      isRead: n.is_read,
      createdAt: n.created_at
    })));
    
    return {
      user,
      notifications,
      unreadCount,
      hasUnread,
      isLoading,
      systemActive: notifications !== null
    };
  } catch (error) {
    console.error('‚ùå Failed to check notification system status:', error);
    return null;
  }
};

/**
 * ÌÜµÌï© ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§
 */
export const runIntegrationTest = async (testNoteId, testUserId) => {
  try {
    console.log('üöÄ Starting notification integration test...');
    
    // 1. ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏
    const systemStatus = checkNotificationSystemStatus();
    if (!systemStatus?.systemActive) {
      throw new Error('Notification system is not active');
    }
    
    // 2. Ïä§ÌÉÄ ÌÖåÏä§Ìä∏
    if (testNoteId) {
      await testStarNotificationIntegration(testNoteId, testUserId);
    }
    
    // 3. ÌåîÎ°úÏö∞ ÌÖåÏä§Ìä∏
    if (testUserId) {
      await testFollowNotificationIntegration(testUserId);
    }
    
    // 4. Í≤∞Í≥º ÌôïÏù∏
    setTimeout(() => {
      console.log('üîç Checking results after 2 seconds...');
      checkNotificationSystemStatus();
    }, 2000);
    
    console.log('‚úÖ Integration test completed successfully');
  } catch (error) {
    console.error('‚ùå Integration test failed:', error);
    throw error;
  }
};

export default {
  testStarNotificationIntegration,
  testFollowNotificationIntegration,
  checkNotificationSystemStatus,
  runIntegrationTest
};