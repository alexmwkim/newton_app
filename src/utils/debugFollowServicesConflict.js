/**
 * Îëê Í∞úÏùò ÌåîÎ°úÏö∞ ÏÑúÎπÑÏä§ Í∞Ñ Îç∞Ïù¥ÌÑ∞ Î∂àÏùºÏπò ÎîîÎ≤ÑÍπÖ
 */

import FollowClientService from '../services/followClient';
import UnifiedFollowService from '../services/UnifiedFollowService';
import { supabase } from '../services/supabase';

class FollowServicesConflictDebugger {
  constructor() {
    this.davidLeeId = 'e7cc75eb-9ed4-42b9-95d6-88ff615aac22';
    this.alexKimId = '10663749-9fba-4039-9f22-d6e7add9ea2d';
  }

  /**
   * Îëê ÏÑúÎπÑÏä§Ïùò Í≤∞Í≥º ÎπÑÍµê
   */
  async compareServices() {
    console.log('üîç COMPARING FOLLOW SERVICES');
    console.log('============================');
    
    try {
      // 1. ÏßÅÏ†ë Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏøºÎ¶¨
      console.log('üìä 1. Direct Database Query:');
      const { count: directFollowing, error: followingError } = await supabase
        .from('follows')
        .select('*', { count: 'exact', head: true })
        .eq('follower_id', this.davidLeeId);
        
      const { count: directFollowers, error: followersError } = await supabase
        .from('follows')
        .select('*', { count: 'exact', head: true })
        .eq('following_id', this.davidLeeId);
        
      console.log(`   David Lee - Direct DB Following: ${directFollowing || 0}`);
      console.log(`   David Lee - Direct DB Followers: ${directFollowers || 0}`);
      
      // 2. FollowClientService (UserProfileScreenÏóêÏÑú ÏÇ¨Ïö©)
      console.log('\nüìä 2. FollowClientService (UserProfileScreen):');
      const clientResult = await FollowClientService.getBatchFollowData(this.davidLeeId, this.alexKimId);
      console.log(`   David Lee - Client Following: ${clientResult.followingCount}`);
      console.log(`   David Lee - Client Followers: ${clientResult.followersCount}`);
      console.log(`   Client Success: ${clientResult.success}`);
      console.log(`   Client Error: ${clientResult.error || 'None'}`);
      
      // 3. UnifiedFollowService (ÌÖåÏä§Ìä∏ÏóêÏÑú ÏÇ¨Ïö©)
      console.log('\nüìä 3. UnifiedFollowService (Tests):');
      const unifiedFollowing = await UnifiedFollowService.getFollowingCount(this.davidLeeId);
      const unifiedFollowers = await UnifiedFollowService.getFollowersCount(this.davidLeeId);
      console.log(`   David Lee - Unified Following: ${unifiedFollowing.count}`);
      console.log(`   David Lee - Unified Followers: ${unifiedFollowers.count}`);
      console.log(`   Unified Following Success: ${unifiedFollowing.success}`);
      console.log(`   Unified Followers Success: ${unifiedFollowers.success}`);
      
      // 4. ÌåîÎ°úÏö∞ ÏÉÅÌÉú ÌôïÏù∏
      console.log('\nüîó 4. Follow Status Check:');
      const clientFollowStatus = clientResult.isFollowing;
      const unifiedFollowStatus = await UnifiedFollowService.isFollowing(this.davidLeeId, this.alexKimId);
      console.log(`   Client: David follows Alex = ${clientFollowStatus}`);
      console.log(`   Unified: David follows Alex = ${unifiedFollowStatus.isFollowing}`);
      
      // 5. Î∂àÏùºÏπò Î∂ÑÏÑù
      console.log('\n‚öñÔ∏è 5. Inconsistency Analysis:');
      const followingMatch = directFollowing === clientResult.followingCount && directFollowing === unifiedFollowing.count;
      const followersMatch = directFollowers === clientResult.followersCount && directFollowers === unifiedFollowers.count;
      const statusMatch = clientFollowStatus === unifiedFollowStatus.isFollowing;
      
      console.log(`   Following counts match: ${followingMatch ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Followers counts match: ${followersMatch ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Follow status match: ${statusMatch ? '‚úÖ' : '‚ùå'}`);
      
      if (!followingMatch) {
        console.log(`   ‚ö†Ô∏è Following mismatch: DB=${directFollowing}, Client=${clientResult.followingCount}, Unified=${unifiedFollowing.count}`);
      }
      if (!followersMatch) {
        console.log(`   ‚ö†Ô∏è Followers mismatch: DB=${directFollowers}, Client=${clientResult.followersCount}, Unified=${unifiedFollowers.count}`);
      }
      if (!statusMatch) {
        console.log(`   ‚ö†Ô∏è Status mismatch: Client=${clientFollowStatus}, Unified=${unifiedFollowStatus.isFollowing}`);
      }
      
      // 6. Ìï¥Í≤∞Ï±Ö Ï†úÏãú
      if (!followingMatch || !followersMatch || !statusMatch) {
        console.log('\nüí° 6. Solution:');
        console.log('   The issue is that UserProfileScreen uses FollowClientService');
        console.log('   while tests use UnifiedFollowService. They have different caching.');
        console.log('   ');
        console.log('   To fix: Update UserProfileScreen to use UnifiedFollowService');
        console.log('   or synchronize the cache between both services.');
      } else {
        console.log('\n‚úÖ 6. All services are in sync!');
      }
      
    } catch (error) {
      console.error('‚ùå Comparison failed:', error);
    }
  }

  /**
   * UserProfileScreenÏù¥ ÏÇ¨Ïö©ÌïòÎäî Îç∞Ïù¥ÌÑ∞ Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®
   */
  async forceRefreshUserProfileData() {
    console.log('üîÑ FORCE REFRESH USER PROFILE DATA');
    console.log('===================================');
    
    try {
      // FollowClientService Ï∫êÏãú ÌÅ¥Î¶¨Ïñ¥ (ÏûàÎã§Î©¥)
      console.log('üóëÔ∏è Clearing FollowClientService data...');
      
      // UnifiedFollowService Ï∫êÏãúÎèÑ ÌÅ¥Î¶¨Ïñ¥
      console.log('üóëÔ∏è Clearing UnifiedFollowService cache...');
      UnifiedFollowService.clearCache(this.davidLeeId);
      
      // FollowClientServiceÎ°ú ÏÉà Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      console.log('üìä Loading fresh data with FollowClientService...');
      const freshData = await FollowClientService.getBatchFollowData(this.davidLeeId, this.alexKimId);
      
      console.log('‚úÖ Fresh UserProfile data:');
      console.log(`   Following: ${freshData.followingCount}`);
      console.log(`   Followers: ${freshData.followersCount}`);
      console.log(`   Is Following Alex: ${freshData.isFollowing}`);
      console.log(`   Success: ${freshData.success}`);
      
      if (freshData.success) {
        console.log('üí° This data should now appear in UserProfileScreen');
        console.log('üí° Try refreshing the profile page or navigating away and back');
      } else {
        console.log('‚ùå FollowClientService failed to load data');
        console.log('‚ùå Error:', freshData.error);
      }
      
    } catch (error) {
      console.error('‚ùå Force refresh failed:', error);
    }
  }
}

// Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§
const followServicesDebugger = new FollowServicesConflictDebugger();

// Í∏ÄÎ°úÎ≤å Ìï®Ïàò Îì±Î°ù
if (__DEV__ && typeof global !== 'undefined') {
  global.compareFollowServices = () => followServicesDebugger.compareServices();
  global.forceRefreshUserProfileData = () => followServicesDebugger.forceRefreshUserProfileData();
  
  console.log('üîç Follow services conflict debugger ready!');
  console.log('üí° Commands:');
  console.log('   global.compareFollowServices() - Compare all follow services');
  console.log('   global.forceRefreshUserProfileData() - Force refresh UserProfile data');
}

export default followServicesDebugger;