/**
 * ÎÑ§Ìä∏ÏõåÌÅ¨ Î∞è Supabase Ïó∞Í≤∞ ÏßÑÎã® Ïú†Ìã∏Î¶¨Ìã∞
 */

import { supabase } from '../services/supabase';
// import NetInfo from '@react-native-community/netinfo'; // ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©

class NetworkDiagnostics {
  /**
   * ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú ÌôïÏù∏ (Í∏∞Î≥∏Ï†ÅÏù∏ Î∞©Î≤ï)
   */
  static async checkNetworkStatus() {
    try {
      // Í∞ÑÎã®Ìïú fetch ÌÖåÏä§Ìä∏Î°ú ÎÑ§Ìä∏ÏõåÌÅ¨ ÌôïÏù∏
      const response = await fetch('https://www.google.com', {
        method: 'HEAD',
        timeout: 5000
      });
      
      const isConnected = response.ok;
      console.log('üåê Network Status:', { isConnected });
      return { isConnected };
    } catch (error) {
      console.error('‚ùå Network check failed:', error);
      return { isConnected: false };
    }
  }

  /**
   * Supabase Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
   */
  static async testSupabaseConnection() {
    try {
      console.log('üîç Testing Supabase connection...');
      
      // Í∞ÑÎã®Ìïú SELECT ÏøºÎ¶¨Î°ú Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
      const { data, error } = await supabase
        .from('profiles')
        .select('count', { count: 'exact', head: true })
        .limit(1);

      if (error) {
        console.error('‚ùå Supabase connection failed:', error);
        return { success: false, error };
      }

      console.log('‚úÖ Supabase connection successful');
      return { success: true, data };
    } catch (error) {
      console.error('‚ùå Supabase connection test failed:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Ï†ÑÏ≤¥ Ïó∞Í≤∞ ÏßÑÎã®
   */
  static async runFullDiagnostics() {
    console.log('ü©∫ Starting network diagnostics...');
    
    const results = {
      timestamp: new Date().toISOString(),
      network: null,
      supabase: null,
      recommendations: []
    };

    // 1. ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú ÌôïÏù∏
    results.network = await this.checkNetworkStatus();
    
    if (!results.network?.isConnected) {
      results.recommendations.push('Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî');
      return results;
    }

    // 2. Supabase Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
    results.supabase = await this.testSupabaseConnection();
    
    if (!results.supabase.success) {
      results.recommendations.push('Supabase ÏÑúÎπÑÏä§ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî');
      results.recommendations.push('ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ïÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî');
    }

    console.log('ü©∫ Diagnostics complete:', results);
    return results;
  }

  /**
   * Ïó∞Í≤∞ Î≥µÍµ¨ ÏãúÎèÑ
   */
  static async attemptReconnection() {
    console.log('üîÑ Attempting to restore connection...');
    
    // 1Ï¥à ÎåÄÍ∏∞ ÌõÑ Ïû¨ÏãúÎèÑ
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const diagnostics = await this.runFullDiagnostics();
    
    if (diagnostics.supabase?.success) {
      console.log('‚úÖ Connection restored successfully');
      return true;
    } else {
      console.log('‚ùå Connection still failed');
      return false;
    }
  }
}

export default NetworkDiagnostics;